#!/usr/bin/env python

Import("env")

env_julia = env.Clone()

# Add the path to julia.h as an include directory.
julia_include = env["julia_include"]
env_julia.Append(CPPPATH=[julia_include])

# Position-independent code is required to embed Julia.
env_julia.Append(CCFLAGS=['-fPIC'])

# Don't inject Godot's dependencies into our library.
env_julia['LIBS'] = []

# Collect all source files.
module_sources = []
module_sources += env_julia.Glob("*.cpp")
module_sources += env_julia.Glob("glue/*.cpp")
if env.editor_build:
    module_sources += env_julia.Glob("editor/*.cpp")

# Define the static library manually so we can get its path below.
lib_julia_script = env_julia.StaticLibrary('module_julia_script', module_sources)

# Tell the linker where to find the Julia shared library.
julia_lib = env["julia_lib"]
env.Append(LIBPATH=[julia_lib])

# NOTE: We inject the dependency on our static library here to ensure it gets built.
env.Append(LIBS=["julia", lib_julia_script])

env.Append(LINKFLAGS=[
    # Export the symbols of the godot_julia_* glue functions, to be called by Julia.
    '-Wl,--dynamic-list=' + File('glue/godot_julia.map').abspath,
    # Ensure the glue code gets linked, which is needed because it is never called inside the C++ code.
    '-Wl,--whole-archive',
    lib_julia_script[0],
    '-Wl,--no-whole-archive',
    # Allow the Godot binary to find the Julia shared library more easily, without setting LD_LIBRARY_PATH etc.
    '-Wl,-rpath,"' + julia_lib + '"',
])
